{"version":3,"sources":["MyButton.js","header.svg","App.js","reportWebVitals.js","index.js"],"names":["MyButton","props","useState","show","setShow","handleClose","Button","className","variant","onClick","pergunta","key","Modal","onHide","animation","centered","Header","Title","Body","resposta","Footer","App","useEffect","document","title","moment","format","myButtons","myKey","forEach","element","push","rel","href","integrity","crossOrigin","src","myLogo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"0OA4BeA,MA1Bf,SAAkBC,GAChB,MAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAc,kBAAMD,GAAQ,IAElC,OACE,qCACE,cAACE,EAAA,EAAD,CAAwBC,UAAU,uBAAuBC,QAAQ,UAAUC,QAH5D,kBAAML,GAAQ,IAG7B,SACGH,EAAMS,UADIT,EAAMU,KAInB,eAACC,EAAA,EAAD,CAAOT,KAAMA,EAAMU,OAAQR,EAAaS,WAAW,EAAOC,UAAQ,EAAlE,UACE,cAACH,EAAA,EAAMI,OAAP,UACE,cAACJ,EAAA,EAAMK,MAAP,UAAchB,EAAMS,aAEtB,cAACE,EAAA,EAAMM,KAAP,UAAajB,EAAMkB,WACnB,cAACP,EAAA,EAAMQ,OAAP,UACE,cAACd,EAAA,EAAD,CAAQE,QAAQ,YAAYC,QAASJ,EAArC,6BCnBK,MAA0B,mC,iBCsE1BgB,MA7Df,WACE,MAA8BnB,oBAAS,GAAvC,6BACAoB,qBAAU,WACRC,SAASC,MACP,8CACAC,MAASC,OAAO,0BAEpB,IAAIC,EAAY,GAyBZC,EAAQ,EAWZ,MAjCe,CACT,CACE,iBACA,qNAEF,CACE,kBACA,yRAEF,CACE,gBACA,iWAEF,CACE,wBACA,+WAEF,CAAC,yBAAuB,OACxB,CAAC,oCAAkC,oBAKhBC,SAAQ,SAACC,GAChCF,IACAD,EAAUI,KACR,cAAC,EAAD,CAEErB,SAAUoB,EAAQ,GAClBX,SAAUW,EAAQ,IAFbF,OAOT,mCACI,sBAAKrB,UAAU,MAAf,UACA,sBACEyB,IAAI,aACJC,KAAK,0EACLC,UAAU,0EACVC,YAAY,cAEd,yBAAQ5B,UAAU,aAAlB,UACE,qBAAKA,UAAU,aAAa6B,IAAKC,EAAQC,IAAI,SAC7C,mCAAGX,aCnDEY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAAS4B,eAAe,SAM1BZ,M","file":"static/js/main.6649cb8a.chunk.js","sourcesContent":["import { React, useState } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nfunction MyButton(props) {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n  return (\r\n    <>\r\n      <Button key={props.key} className=\"myButton btn-warning\" variant=\"primary\" onClick={handleShow}>\r\n        {props.pergunta}\r\n      </Button>\r\n\r\n      <Modal show={show} onHide={handleClose} animation={false} centered>\r\n        <Modal.Header>\r\n          <Modal.Title>{props.pergunta}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{props.resposta}</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Fechar\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MyButton;\r\n","export default __webpack_public_path__ + \"static/media/header.1c821e17.svg\";","import \"./App.css\";\nimport \"react-dropdown/style.css\";\nimport MyButton from \"./MyButton\";\nimport myLogo from \"./header.svg\";\nimport moment from \"moment\";\nimport LoadingScreen from './Loading'\n\nimport React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [loading, setLoading] = useState(true)\n  useEffect(() => {\n    document.title =\n      \"Refatoração dos portais EasyDental - \" +\n      moment().format(\"DD-MM-YYYY hh:mm:ss\");\n  });\n  let myButtons = [];\n  let mydocs = {\n    content: {\n      questions: [\n        [\n          \"O que faremos?\",\n          \"Uma refatoração completa dos portais da EasyDental, de forma a unificar os domínios, aumentar o número de leads e conversões, gerar engajamento e conteúdo para facilitar o suporte da empresa.\",\n        ],\n        [\n          \"Porque faremos?\",\n          \"A experiência de usuário atual está um pouco defasada, e a concorrência tem procurado utilizar as ferramentas mais modernas nesse sentido. Além disso, problemas com a manutenção dos portais se estendem muito no tempo e pouco código é reutilizável.\",\n        ],\n        [\n          \"Como faremos?\",\n          \"Utilizando as validações anteriores, dos portais antigos (tipografia, cores...), vamos criar em paralelo um portal em ReactJS, mantendo o fluxo de postagens do blog em Wordpress. Os domínios seguirão o modelo que atualmente é utilizado no blog, ou seja, teremos links 'blog.easydental.com.br', 'universidade.easydental.com.br', etc...\",\n        ],\n        [\n          \"E os portais antigos?\",\n          \"Com um cronograma bem definido, vamos substituir cada portal atualmente produzido por um subdomínio testado internamente (Jest). Nenhuma integração vai parar de funcionar 'do nada'. Além disso, a proposta é que o portal seja projetado para que sua manutenção básica (textos, imagens, cores, fontes, etc.) não dependa de desenvolvedores.\",\n        ],\n        [\"Até quando faremos?\", \"...\"],\n        [\"Já temos um preview do portal?\", \"Ainda não...\"],\n      ],\n    },\n  };\n  let myKey = 0;\n  mydocs.content.questions.forEach((element) => {\n    myKey++;\n    myButtons.push(\n      <MyButton\n        key={myKey}\n        pergunta={element[0]}\n        resposta={element[1]}\n      ></MyButton>\n    );\n  });\n  return (\n    <>\n        <div className=\"App\">\n        <link\n          rel=\"stylesheet\"\n          href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\"\n          integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\"\n          crossOrigin=\"anonymous\"\n        />\n        <header className=\"App-header\">\n          <img className=\"logoHeader\" src={myLogo} alt=\"logo\"></img>\n          <>{myButtons}</>\n        </header>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}